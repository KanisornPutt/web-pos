{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"h1\", null, \"Redirecting....\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/Users/shane/Desktop/isc project/frontend/web-pos 3.0/src/views/auth/RedirectView.vue"],"sourcesContent":["<template>\n  <h1>Redirecting....</h1>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { onMounted, ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useStore } from \"vuex\";\n\nexport default {\n  setup() {\n    const email = ref(\"\");\n    const router = useRouter();\n    const store = useStore();\n\n    const getAccessToken = async (code) => {\n      try {\n        const response = await axios.post(\"https://oauth2.googleapis.com/token\", {\n          code: code,\n          client_id: \"38181892421-dcmv3r9nvnkbalt85nskg16qtlc8e7n5.apps.googleusercontent.com\",\n          client_secret: \"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\",\n          redirect_uri: \"http://localhost:8020/redirect\",\n          grant_type: \"authorization_code\",\n        });\n\n        const accessToken = response.data.access_token;\n        await getUserInfo(accessToken);\n      } catch (error) {\n        console.error(\"Failed to exchange authorization code for access token:\", error);\n      }\n    };\n\n    const getUserInfo = async (accessToken) => {\n      try {\n        const response = await axios.get(\"https://www.googleapis.com/oauth2/v1/userinfo?alt=json\", {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        const userInfo = response.data;\n        console.log(\"User Info:\", userInfo);\n\n        // Call the oauth action with the user info\n        const registerUser = {\n          firstname: userInfo.given_name,\n          lastname: userInfo.family_name,\n          show_name: userInfo.given_name,\n          email: userInfo.email,\n          password: \"N/A\",\n        };\n        await store.dispatch(\"auth/oauth\", registerUser);\n\n        router.push(\"/dashboard\");\n      } catch (error) {\n        console.error(\"Failed to fetch user info:\", error);\n      }\n    };\n\n    onMounted(() => {\n      const code = new URL(window.location.href).searchParams.get(\"code\");\n      const state = new URL(window.location.href).searchParams.get(\"state\");\n\n      if (code && state) {\n        getAccessToken(code);\n      } else {\n        console.error(\"Authorization code or state missing.\");\n      }\n    });\n\n    return { email };\n  },\n};\n</script>\n\n<style></style>\n"],"mappings":";;uBACEA,mBAAA,CAAwB,YAApB,iBAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}